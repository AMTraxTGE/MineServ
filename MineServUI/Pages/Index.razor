@page "/"
@using System.IO;
@using System.Text; 
@using System.Net.WebSockets; 
@using System.Threading;

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<input type="text" @bind-value="@ServerAddress" />
<button @onclick="@Connect">
    Connect
</button>
<input type="text" @bind-value="@MessageToSend" />
<button @onclick="() => Send(MessageToSend)">
    Send Test
</button>

<p>
    @Result
</p>

<div>
    @foreach (var item in status)
    {
        <p>@item</p>
    }
</div>


@code {
    public string ServerAddress { get; set; } = "localhost:8080";
    public string MessageToSend { get; set; }
    public List<string> status = new List<string>();
    public string Result { get; set; }


    public ClientWebSocket Socket { get; set; }

    public async void Connect()
    {
        addToLog("Connecting to Socket");
        using (Socket = new ClientWebSocket())
        {
            try
            {
                await Socket.ConnectAsync(new Uri($"ws://{ServerAddress}"), CancellationToken.None);
                addToLog(Socket.State.ToString());

                await Receive(Socket);
            }
            catch (Exception ex)
            {
                var exception = ex;
            }
        }
    }

    private async Task Send(string data) =>
    await Socket.SendAsync(Encoding.UTF8.GetBytes(data), WebSocketMessageType.Text, true, CancellationToken.None);

    private async Task Receive(ClientWebSocket socket)
    {
        var buffer = new ArraySegment<byte>(new byte[2048]);

        do
        {
            WebSocketReceiveResult result;

            using (var ms = new MemoryStream())
            {
                do
                {
                    result = await socket.ReceiveAsync(buffer, CancellationToken.None);
                    ms.Write(buffer.Array, buffer.Offset, result.Count);
                } while (!result.EndOfMessage);

                if (result.MessageType == WebSocketMessageType.Close) break;

                ms.Seek(0, SeekOrigin.Begin);
                using (var reader = new StreamReader(ms, Encoding.UTF8))
                    Result = await reader.ReadToEndAsync();
                addToLog("Received");

            }

        } while (true);


    }

    private void addToLog(string message) {
        status.Add(message);
        StateHasChanged();
    }
}